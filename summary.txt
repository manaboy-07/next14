Catch ALL SEGMEnts - e.g documentation sites
hint. Check docs folder

404-page check not-found.tsx in the app folder, if a page is not-found based on some input just import not-found from next navigation.
then notfount() 

Authentication pages-(auth)
Private folders are ommited in routing and convention usually named with an underscore

RouteGroups - convention usually with () - check (auth)

Layout - accepts children prop
MetaData - Check producs/producid/page

Meta-Data check blog and layout on how to use it.
the 

Styling active links please check the auth layout pg

For how to use layout and template.tsx check 22 yt codeeveolution 

Error-handling using error.tsx check product review side. check vid 27

Parallel route - complex-dashboard, like they can have thier own loading state and error state, vid 28
Handling unmatched route- also check the complex-dashboard, @revenue using default.tsx

Conditional Routes - @login in complex-dashboard

Intercepting Routes - check f1,f2 folder.
Naming convention is (.)fileName
(.) to match segments on the same level
(..) to match segments one level above
(...) to match segments in to root directory
pls check vid 32.

Route-Handlers, RESTFUL-api
check hello folder,
route handlers can also be nexted as if they were page.tsx.
page and route must not be in the same directory hence we use an api folder and store the route.ts there.
Check comments folder then route.ts, experiment with thunder client.
for dynamic api routing pls check the [id]. here we studies path, and delete requets

Handing URL query params, check comments first level folder


Headers in Route Handlers-
http headers represent the metadata associated with an api request and response.

Request Headers :
These are sent by the client suach as a web browser to the server they contain essesntial information about the request, which 
helps the server understand and process it correctly
'User-Agent' which identifies the browser and the os to the server
'Accept-header' vids, text
'Authorization'
'Response Headers' e.g content-type, the data type of the content 
Checkout profile folder


COOkies in Route Handlers

Cookies are small pieces of data that a server send to a users web browser
The browser ,ay store the cookie and send it back to the same server with later requests
-Cookies are mainly used for three purposes
1. Session management like logins and shoppint carts
2. Personalization like user preferences and themes
3. Tracking like recording and analyzing user behaviour again check profile folder


Caching in Route Handlers

route Handlers are cached by default when using the Get method with response object in NextJsCheck out time folder


MiddleWare, - check src folder , parts where it will be active .
Custom matcher and COnditonal

Server Side sols
1. SSG static site generation - occurs at bulild time,it is ideal for content that doesnt change often e.g blog posts

SSR- renders pages on demand in response to user requests , it is suitable for personalized content like social media feeds where HTML depends on the logged-in user

Suspense SSR architecture

Client Componetns - handle activities , localstorage
Server Componetns - operates on the server, the code stays on the Serverbenefits
improved data fetching,
enables caching

Real time applications will require ssr, useing the getServerSideProps action
SSG - is the default by next js
ISR - uses revalidate , check either chatgpt, next14 or any next folders on your desktop

Incremental Static Regeneration (ISR) is a feature introduced by Next.js that allows you to update static pages at runtime without requiring a full rebuild. It's a hybrid approach that combines the benefits of Static Site Generation (SSG) with the ability to revalidate and update pages dynamically as new data becomes available. ISR is particularly useful for scenarios where you want to provide frequently updated content while still benefiting from the performance advantages of static pages.

Server Rendering Strageies
1. Static Rendering
2. Dynamic rendering
3. STreaming

Static rendering - pages are built in advanced, e-commerce product page, blog,
Dynamic rendering is a server rendering strategy where routes are rendered for each user at request time

Steaming - allows us to render components that take time, using the suspense


react-slick is a carousel libraru